import base64
exec(base64.b64decode(b'IyBXRUxDT01FIFRPIEdIT1NUIFdPUkxECiMgRk9MTE9XIE1ZIEdJVEhVQiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9DWUJFUi1HSE9TVC1BVFRBQ0sKIy0tLS0tLS0tLS0tLS0gSU1QT1JUIC0tLS0tLS0tLS0tLSMgCmZyb20gb3MgaW1wb3J0IHN5c3RlbSBhcyBjIAppbXBvcnQgb3Msc3lzCmltcG9ydCBtYXJzaGFsIAppbXBvcnQgYmFzZTY0IAppbXBvcnQgemxpYiAKdHJ5OiAKICAgIGZyb20gQ3l0aG9uLkJ1aWxkLkJ1aWxkRXhlY3V0YWJsZSBpbXBvcnQgYnVpbGQgYXMgZXhlY3V0ZSAKZXhjZXB0OiAKICAgIGMoJ3BpcCBpbnN0YWxsIGN5dGhvbiA+L2Rldi9udWxsJykgCiAKCm9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly90Lm1lL0N5YmVyR2hvc3RBdHRhY2snKQojLS0tLS0tLS0tLS0tLS0tLSBMT0dPIC0tLS0tLS0tLS0tIyAKbG9nbz0nJycgClwwMzNbMTszMm0KIOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilZcgIOKWiOKWiOKVlyDilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4paI4pWXCuKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVnSDilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVkOKWiOKWiOKVlOKVkOKVkOKVnQrilojilojilZEgIOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyAgIOKWiOKWiOKVkSAgIArilojilojilZEgICDilojilojilZHilojilojilZTilZDilZDilojilojilZHilojilojilZEgICDilojilojilZHilZrilZDilZDilZDilZDilojilojilZEgICDilojilojilZEgICAK4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRICDilojilojilZHilZrilojilojilojilojilojilojilZTilZ3ilojilojilojilojilojilojilojilZEgICDilojilojilZEgICAKIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZ0gIOKVmuKVkOKVnSDilZrilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdICAg4pWa4pWQ4pWdCicnJyAKIy0tLS0tLS0tLS0tLS0tLSBDTEVBUiBGVU5DVElPTiAtLS0tLS0tLS0tLS0tIyAKZGVmIGNsZWFyKCk6IAogICAgYygnY2xlYXInKSAKICAgIHByaW50KGxvZ28pIAogICAgcHJpbnQoNDAqJy0nKSAKICAgIHByaW50KCcgRkIgUEFHRSA6IEdIT1NUIEFUVEFDSycpIAogICAgcHJpbnQoJyBHSVRIVUIgIDogQ1lCRVItR0hPU1QtQVRUQUNLJykgCiAgICBwcmludCg0MConLScpIAojLS0tLS0tLS0tLS0gTUFJTiBGVU5DVElPTiAtLS0tLS0tLS0tLS0jIApkZWYgbWFpbigpOiAKICAgIGNsZWFyKCkgCiAgICBwcmludCgnIFtBXSBNQVJTSEFMIEVOQ1JZUFRJT04gJykgCiAgICBwcmludCgnIFtCXSBCQVNFNjQgIEVOQ1JZUFRJT04gJykgCiAgICBwcmludCgnIFtDXSBaTElCICAgIEVOQ1JZUFRJT04gJykgCiAgICBwcmludCgnIFtEXSBDWVRIT04gIEVYRUNVVEFCTEUgJykgCiAgICBwcmludCgnIFtFXSBFWElUIFRFUk1JTkFMICcpIAogICAgcHJpbnQoNDAqJy0nKSAKICAgIG9wdGlvbj1pbnB1dCgnIFs/XSBDSE9JQ0UgTUVOVSA6ICcpIAogICAgaWYgb3B0aW9uIGluIFsnYScsJ0EnXTogCiAgICAgICAgbWFyc2hhbF9lbmMoKSAKICAgIGVsaWYgb3B0aW9uIGluIFsnYicsJ0InXTogCiAgICAgICAgYmFzZTY0X2VuYygpIAogICAgZWxpZiBvcHRpb24gaW4gWydjJywnQyddOiAKICAgICAgICB6bGliX2VuYygpIAogICAgZWxpZiBvcHRpb24gaW4gWydkJywnRCddOiAKICAgICAgICBjeXRob25fZXhlY3V0YWJsZSgpIAogICAgZWxzZTogCiAgICAgICAgZXhpdCgnIFRPT0wgRVhJVEVEIDovJykgCiMtLS0tLS0tLS0tLSBNQVJTSEFMIEVOQ1JZUFRJT04gLS0tLS0tLS0tLS0tLS0jIApkZWYgbWFyc2hhbF9lbmMoKTogCiAgICBjbGVhcigpIAogICAgZmlsZT1pbnB1dCgnIEVOVEVSIFNPVVJDRSBGSUxFIE5BTUUgOiAnKSAKICAgIGZpbGV4PWlucHV0KCcgRU5URVIgT1VUUFVUIEZJTEUgTkFNRSA6ICcpIAogICAgdHJ5OiAKICAgICAgICBmaWxlX29wZW49b3BlbihmaWxlLCdyJykucmVhZCgpIAogICAgZXhjZXB0OiAKICAgICAgICBleGl0KCcgRklMRSBOT1QgRk9VTkQgRVJST1IgISEnKSAKICAgIGNvbXBpbGV4PWNvbXBpbGUoZmlsZV9vcGVuLCdkZycsJ2V4ZWMnKSAKICAgIGR1bXA9bWFyc2hhbC5kdW1wcyhjb21waWxleCkgCiAgICBydW5fY29kZT1mJ2ltcG9ydCBtYXJzaGFsIFxuZXhlYyhtYXJzaGFsLmxvYWRzKHtkdW1wfSkpJyAKICAgIG91dF9wdXQ9b3BlbihmaWxleCwndycpIAogICAgb3V0X3B1dC53cml0ZShydW5fY29kZSkgCiAgICBvdXRfcHV0LmNsb3NlKCkgCiAgICBwcmludCg0MConLScpIAogICAgcHJpbnQoJyBb4pyT4pyTXSBFTkNSWVBUSU9OIENPTVBMRVRFIDovICcpIAogICAgcHJpbnQoJyBb4pyT4pyTXSBPVVRQVVQgRklMRSBTQVZFIEFTIDogJytmaWxleCkgCm9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Byb2ZpbGUucGhwP2lkPTYxNTU3OTgyODIwOTk5JykKIy0tLS0tLS0tLS0gQkFTRTY0IEVOQ1JZUFRJT04gLS0tLS0tLS0tLS0tIyAKZGVmIGJhc2U2NF9lbmMoKTogCiAgICBjbGVhcigpIAogICAgaW5wdXRfZmlsZT1pbnB1dCgnIEVOVEVSIFNPVVJDRSBGSUxFIFBBVEggOiAnKSAKICAgIG91dHB1dF9maWxlPWlucHV0KCcgRU5URVIgT1VUUFVUIEZJTEUgUEFUSCA6ICcpIAogICAgdHJ5OiAKICAgICAgICBmaWxlX29wZW49b3BlbihpbnB1dF9maWxlLCdyJykucmVhZCgpIAogICAgZXhjZXB0OiAKICAgICAgICBleGl0KCcgRklMRSBOT1QgRk9VTkQgRVJST1IgISEnKSAKICAgIGNvbXBpbGU9YmFzZTY0LmI2NGVuY29kZShmaWxlX29wZW4uZW5jb2RlKCkpIAogICAgcnVuX2NvZGU9ZidpbXBvcnQgYmFzZTY0XG5leGVjKGJhc2U2NC5iNjRkZWNvZGUoe2NvbXBpbGV9KSknIAogICAgb3V0X3B1dD1vcGVuKG91dHB1dF9maWxlLCd3JykgCiAgICBvdXRfcHV0LndyaXRlKHJ1bl9jb2RlKSAKICAgIG91dF9wdXQuY2xvc2UoKSAKICAgIHByaW50KCcgW+Kck+Kck10gRU5DUllQVElPTiBDT01QTEVURSA6LycpIAogICAgcHJpbnQoJyBb4pyT4pyTXSBFTkMgRklMRSBTQVZFIEFTIDogJytvdXRwdXRfZmlsZSkKb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vcHJvZmlsZS5waHA/aWQ9NjE1NTc5ODI4MjA5OTknKSAKIy0tLS0tLS0tLS0tLS0tLS0gWkxJQiBFTkNSWVBUSU9OIC0tLS0tLS0tLS0tLS0tLS0tIyAKZGVmIHpsaWJfZW5jKCk6IAogICAgY2xlYXIoKSAKICAgIHNyYz1pbnB1dCgnIEVOVEVSIFNPVVJDRSBGSUxFIFBBVEggOiAnKSAKICAgIHNhdmVfZmlsZT1pbnB1dCgnIEVOVEVSIE9VVFBVVCBGSUxFIFBBVEggOiAnKSAKICAgIHRyeTogCiAgICAgICAgc3JjX2ZpbGU9b3BlbihzcmMsJ3InKS5yZWFkKCkgCiAgICBleGNlcHQ6IAogICAgICAgIGV4aXQoJyBGSUxFIE5PVCBGT1VORCAhIScpIAogICAgY29tcGlsZV96bGliPXpsaWIuY29tcHJlc3Moc3JjX2ZpbGUuZW5jb2RlKCkpIAogICAgcnVuX2NvZGU9ZidpbXBvcnQgemxpYlxuZXhlYyh6bGliLmRlY29tcHJlc3Moe2NvbXBpbGVfemxpYn0pLmRlY29kZSgpKScgCiAgICBvdXRfcHV0PW9wZW4oc2F2ZV9maWxlLCd3JykgCiAgICBvdXRfcHV0LndyaXRlKHJ1bl9jb2RlKSAKICAgIG91dF9wdXQuY2xvc2UoKSAKICAgIHByaW50KCcgW+Kck+Kck10gRU5DUllQVElPTiBDT01QTEVURSA6LycpIAogICAgcHJpbnQoJyBb4pyT4pyTXSBFTkMgRklMRSBTQVZFIEFTIDogJytzYXZlX2ZpbGUpIApvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD02MTU1Nzk4MjgyMDk5OScpCiMtLS0tLS0tLS0tLS0tLS0gQ1lUSE9OIEVYRUNVVEFCTEUgLS0tLS0tLS0tLS0tLS0tLS0jIApkZWYgY3l0aG9uX2V4ZWN1dGFibGUoKTogCiAgICBjbGVhcigpIAogICAgZmlsZT1pbnB1dCgnIEVOVEVSIFNPVVJDRSBGSUxFIFBBVEggOiAnKSAKICAgIHRyeTogCiAgICAgICAgZmlsZXg9b3BlbihmaWxlLCdyJykucmVhZCgpIAogICAgZXhjZXB0OiAKICAgICAgICBleGl0KCcgRklMRSBOT1QgRk9VTkQgRVJST1IgOi8nKSAKICAgIGVycm9yPWZpbGV4LnJlcGxhY2UoJyAnLCcgICAgJykgCiAgICBzb2x2ZT1vcGVuKGZpbGUsJ3cnKS53cml0ZShlcnJvcikgCiAgICBleGVjdXRlKGZpbGUpIAogICAgY2xlYXIoKSAKICAgIHByaW50KCcgW+Kck+Kck10gQ1lUSE9OIEVYRUNVVEFCTEUgQ09NUExFVEUgOiIpJykgCiAgICBzYXZlPWZpbGVbOi0zXSAKICAgIHByaW50KCcgW+Kck+Kck10gRVhFQ1VUQUJMRSBGSUxFIFNBVkUgQVMgOiAnK3NhdmUpIApvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD02MTU1Nzk4MjgyMDk5OScpICAgCiMtLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0jIAptYWluKCk='))